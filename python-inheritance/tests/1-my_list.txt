#!/usr/bin/python3
"""Unittest for my_list([..])
"""
import unittest
print_sorted = __import__('1-my_list').print_sorted

class TestMyList(unittest.TestCase):
    """Class to test the print_sorted function"""

def test_inheritance(self):
        self.assertTrue(issubclass(MyList, list))

    def test_instantiation(self):
        my_list = MyList()
        self.assertIsInstance(my_list, MyList)

    def test_append_and_str(self):
        my_list = MyList()
        my_list.append(10)
        self.assertEqual(str(my_list), "[10]")

    def test_print_sorted_already_sorted(self):
        my_list = MyList([1, 2, 3])
        with StringIO() as buf, redirect_stdout(buf):
            my_list.print_sorted()
            output = buf.getvalue().strip()
        self.assertEqual(output, "[1, 2, 3]")

    def test_print_sorted_unsorted(self):
        my_list = MyList([3, 1, 2])
        with StringIO() as buf, redirect_stdout(buf):
            my_list.print_sorted()
            output = buf.getvalue().strip()
        self.assertEqual(output, "[1, 2, 3]")

    def test_print_sorted_with_negative(self):
        my_list = MyList([3, -1, 2])
        with StringIO() as buf, redirect_stdout(buf):
            my_list.print_sorted()
            output = buf.getvalue().strip()
        self.assertEqual(output, "[-1, 2, 3]")

    def test_print_sorted_empty_list(self):
        my_list = MyList()
        with StringIO() as buf, redirect_stdout(buf):
            my_list.print_sorted()
            output = buf.getvalue().strip()
        self.assertEqual(output, "[]")

    def test_print_sorted_does_not_modify_original(self):
        my_list = MyList([3, 1, 2])
        original_copy = my_list.copy()
        with StringIO() as buf, redirect_stdout(buf):
            my_list.print_sorted()
        self.assertEqual(my_list, original_copy)


if __name__ == "__main__":
    unittest.main()
